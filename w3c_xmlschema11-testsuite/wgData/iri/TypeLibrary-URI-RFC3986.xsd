<?xml version="1.0"?>
<?xml-stylesheet href="../../../2008/09/xsd.xsl" type="text/xsl"?>
<!-- PUBLIC "-//W3C//DTD XMLSchema 200102//EN" 
                           "http://www.w3.org/2001/XMLSchema.dtd" -->
<!DOCTYPE xs:schema  [
<!ATTLIST xs:documentation xmlns CDATA #IMPLIED>
<!ELEMENT p (#PCDATA)>

<!--* This schema document provides XSD patterns for URI, 
    * URI-reference, and other constructs defined in RFC 3986.
    *-->

<!--* The regex patterns will be rather complicated, and will be hard
    * to verify and debug if we're not careful.  So we build the 
    * regexes systematically by transforming the ABNF grammar of 
    * the RFC into entity declarations:  references to literals turn 
    * into literals, and references to non-terminals turn into 
    * entity references.  (Don't try this with a context-free
    * grammar; you'll get circular entity references.)
    *-->

<!--* We give the entity declarations in a bottom-up order, because
    * some XML parsers make the mistake of trying to expand the
    * entities when reading the entity declaration, and want
    * declaration before use.  (DV, listen to me when I am talking 
    * to you.)
    *
    * When multiple entity declarations are given, the last one
    * shown is the one created by the mechanical translation.
    * The earlier ones are manual reformulations of the expression
    * mostly for compactness and clarity, and occasionally to fix
    * problems with character escaping.
    *-->


<!--* Character classes, groups, what have you *-->

<!ENTITY ALPHA "([A-Za-z])">
<!ENTITY ALPHA "([A-Z]|[a-z])">

<!ENTITY DIGIT "[0-9]">

<!ENTITY HEXDIG "[0-9A-Fa-f]">
<!ENTITY HEXDIG "(&DIGIT;|A|B|C|D|E|F)">

<!ENTITY sub-delims "[!$&amp;'()*+,;=]">
<!ENTITY sub-delims "(!|$|&amp;|'|\(|\)|\*|\+|,|;|=)">
<!ENTITY sub-delims "(!|$|&amp;|'|(|)|*|+|,|;|=)">

<!ENTITY gen-delims "[:/?#\[\]@]">
<!ENTITY gen-delims "(:|/|\?|#|\[|\]|@)">
<!ENTITY gen-delims "(:|/|?|#|[|]|@)">

<!ENTITY reserved "(&gen-delims;|&sub-delims;)">

<!ENTITY unreserved "[A-Za-z0-9\-\._~]">
<!ENTITY unreserved "(&ALPHA;|&DIGIT;|-|.|_|~)">

<!ENTITY pct-encoded "(&#37;&HEXDIG;&HEXDIG;)">

<!ENTITY pchar "([A-Za-z0-9\-\._~!$&amp;'()*+,;=:@]|&pct-encoded;)">
<!ENTITY pchar "(&unreserved;|&pct-encoded;|&sub-delims;|:|@)">


<!--* The URI scheme *-->

<!ENTITY scheme "(&ALPHA;[A-Za-z0-9+\-\.]*)">
<!ENTITY scheme "(&ALPHA;((&ALPHA;|&DIGIT;|+|-|.))*)">


<!--* The hierarchical part of the URI:  authority and path *-->
<!--* Authority:  user info, host, port number *-->

<!ENTITY userinfo "([A-Za-z0-9\-\._~!$&amp;'()*+,;=:]|&pct-encoded;)*">
<!ENTITY userinfo "((&unreserved;|&pct-encoded;|&sub-delims;|:))*">

<!--* Host:  the most elaborate part of the grammar.
    * reg-name, IPv4, IPv6, and IPvFuture.
    *-->

<!ENTITY reg-name "((&unreserved;|&pct-encoded;|&sub-delims;))*">

<!ENTITY dec-octet "(&DIGIT;|([1-9]&DIGIT;)|(1(&DIGIT;){2})|(2[0-4]&DIGIT;)|(25[0-5]))">

<!ENTITY IPv4address "(&dec-octet;\.&dec-octet;\.&dec-octet;\.&dec-octet;)">

<!ENTITY h16 "(&HEXDIG;){0,4}">

<!ENTITY ls32 "((&h16;:&h16;)|&IPv4address;)">

<!ENTITY IPv6address "((((&h16;:)){6}&ls32;)|(::((&h16;:)){5}&ls32;)|((&h16;)?::((&h16;:)){4}&ls32;)|(((((&h16;:))?&h16;))?::((&h16;:)){3}&ls32;)|(((((&h16;:)){0,2}&h16;))?::((&h16;:)){2}&ls32;)|(((((&h16;:)){0,3}&h16;))?::&h16;:&ls32;)|(((((&h16;:)){0,4}&h16;))?::&ls32;)|(((((&h16;:)){0,5}&h16;))?::&h16;)|(((((&h16;:)){0,6}&h16;))?::))">

<!ENTITY IPvFuture "(v(&HEXDIG;)+\.((&unreserved;|&sub-delims;|:))+)">

<!ENTITY IP-literal "(\[(&IPv6address;|&IPvFuture;)\])">

<!ENTITY host "(&IP-literal;|&IPv4address;|&reg-name;)">

<!ENTITY port "(&DIGIT;)*">

<!ENTITY authority "(((&userinfo;@))?&host;((:&port;))?)">

<!--* Path (second major part of hier-part):  first segments, then various kinds of path *-->

<!ENTITY segment "(&pchar;)*">

<!ENTITY segment-nz "(&pchar;)+">

<!ENTITY segment-nz-nc "((&unreserved;|&pct-encoded;|&sub-delims;|@))+">

<!ENTITY path-abempty "((/&segment;))*">

<!ENTITY path-absolute "(/((&segment-nz;((/&segment;))*))?)">

<!ENTITY path-noscheme "(&segment-nz-nc;((/&segment;))*)">

<!ENTITY path-rootless "(&segment-nz;((/&segment;))*)">

<!ENTITY path-empty "">

<!ENTITY path "(&path-abempty;|&path-absolute;|&path-noscheme;|&path-rootless;|&path-empty;)">

<!ENTITY hier-part "((//&authority;&path-abempty;)|&path-absolute;|&path-rootless;|&path-empty;)">

<!--* end of hier-part *-->


<!--* Query part *-->

<!ENTITY query "((&pchar;|/|\?))*">


<!--* Fragment part *-->

<!ENTITY fragment "((&pchar;|/|\?))*">


<!--* Relative references *-->

<!ENTITY relative-part "((//&authority;&path-abempty;)|&path-absolute;|&path-noscheme;)?">
<!--* Some regexp handlers turn out to have problems with the trailing empty branch, 
    * so delete it and make the entire expression optional instead. The bug has been
    * reported, but in the meantime let's work around it.  
    *-->
<!ENTITY relative-part "((//&authority;&path-abempty;)|&path-absolute;|&path-noscheme;|&path-empty;)">

<!ENTITY relative-ref "(&relative-part;((\?&query;))?((#&fragment;))?)">


<!--* URIs, relative references, URI references *-->

<!ENTITY URI "(&scheme;:&hier-part;((\?&query;))?((#&fragment;))?)">

<!ENTITY URI-reference "(&URI;|&relative-ref;)">

<!ENTITY absolute-URI "(&scheme;:&hier-part;((\?&query;))?)">

]>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
	   xmlns:lib="http://www.w3.org/2001/03/XMLSchema/TypeLibrary" 
	   version="1.0" 
	   elementFormDefault="qualified" 
	   xml:lang="en" 
	   targetNamespace="http://www.w3.org/2001/03/XMLSchema/TypeLibrary">

 
  <xs:annotation>
   <xs:documentation xmlns="http://www.w3.org/1999/xhtml">

     <h3>Introduction</h3>

     <p>This schema document describes a [draft] component of the XML
     Schema type library: datatypes for URIs as defined by RFC 3986.</p>
    
     <p>The types defined here check the conformance of literal
     strings against the regular expression given in Appendix A of <a
     href="http://www.ietf.org/rfc/rfc3986.txt">RFC 3986</a>,
     translated into XSD notation.  See also the 
     <a href="TypeLibrary-IRI-RFC3987.xsd">schema document
     for IRIs</a> located in the same directory as this document.</p>

     <p>Please send suggestions for improvements to
     www-xml-schema-comments@w3.org.  Mention the URI
     of this document:  
     <code><a href="">
     http://www.w3.org/2011/04/XMLSchema/TypeLibrary-URI-3986.xsd
     </a></code>
     </p>

     <p>See below (at the bottom of this document) for information about
     the revision and namespace-versioning policy governing this
     schema document.</p>
     
   </xs:documentation>
  </xs:annotation>

  <xs:simpleType name="URI-3986">
    <xs:annotation>
        <xs:documentation xmlns="http://www.w3.org/1999/xhtml">
	  <p>RFC 3986 says:</p>
	  <blockquote>
	    <p>
	      A URI is an identifier consisting of a sequence of characters
	      matching the syntax rule named &lt;URI&gt; in Section 3.  It enables
	      uniform identification of resources via a separately defined
	      extensible set of naming schemes (Section 3.1).  How that
	      identification is accomplished, assigned, or enabled is delegated to
	      each scheme specification.
	    </p>
	  </blockquote>

	  <p>
            The URI-3986 type checks the string against the regex
            grammar for URI in RFC 3986 Appendix A.  (The regex 
	    in Appendix B would be simpler, but it accepts any
	    string of Basic Latin characters, whether they satisfy
	    the grammar for URIs or not.  So for validation, it's
	    useless.)
	  </p>
	  <p>
	    Note that the grammar for URI is essentially the same
	    as that for absolute URIs, with the addition of an 
	    optional hash mark (#) and fragment identifier:
	  </p>
	  <pre>
	    URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]
	  </pre>
        </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:anyURI">
      <xs:pattern value="&URI;"/>
      <!--* If XML didn't have entities and entity references, we would
          * have to write this out in full, thus:

      <xs:pattern 
	  value="((([A-Za-z])[A-Za-z0-9+\-\.]*):((//(((([A-Za-z0-9\-\._~!$&amp;'()*+,;=:]|(%[0-9A-Fa-f][0-9A-Fa-f]))*@))?((\[(((((([0-9A-Fa-f]){0,4}:)){6}((([0-9A-Fa-f]){0,4}:([0-9A-Fa-f]){0,4})|(([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5])))))|(::((([0-9A-Fa-f]){0,4}:)){5}((([0-9A-Fa-f]){0,4}:([0-9A-Fa-f]){0,4})|(([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5])))))|((([0-9A-Fa-f]){0,4})?::((([0-9A-Fa-f]){0,4}:)){4}((([0-9A-Fa-f]){0,4}:([0-9A-Fa-f]){0,4})|(([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5])))))|(((((([0-9A-Fa-f]){0,4}:))?([0-9A-Fa-f]){0,4}))?::((([0-9A-Fa-f]){0,4}:)){3}((([0-9A-Fa-f]){0,4}:([0-9A-Fa-f]){0,4})|(([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5])))))|(((((([0-9A-Fa-f]){0,4}:)){0,2}([0-9A-Fa-f]){0,4}))?::((([0-9A-Fa-f]){0,4}:)){2}((([0-9A-Fa-f]){0,4}:([0-9A-Fa-f]){0,4})|(([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5])))))|(((((([0-9A-Fa-f]){0,4}:)){0,3}([0-9A-Fa-f]){0,4}))?::([0-9A-Fa-f]){0,4}:((([0-9A-Fa-f]){0,4}:([0-9A-Fa-f]){0,4})|(([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5])))))|(((((([0-9A-Fa-f]){0,4}:)){0,4}([0-9A-Fa-f]){0,4}))?::((([0-9A-Fa-f]){0,4}:([0-9A-Fa-f]){0,4})|(([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5])))))|(((((([0-9A-Fa-f]){0,4}:)){0,5}([0-9A-Fa-f]){0,4}))?::([0-9A-Fa-f]){0,4})|(((((([0-9A-Fa-f]){0,4}:)){0,6}([0-9A-Fa-f]){0,4}))?::))|(v([0-9A-Fa-f])+\.(([A-Za-z0-9\-\._~]|[!$&amp;'()*+,;=]|:))+))\])|(([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|([1-9][0-9])|(1([0-9]){2})|(2[0-4][0-9])|(25[0-5])))|(([A-Za-z0-9\-\._~]|(%[0-9A-Fa-f][0-9A-Fa-f])|[!$&amp;'()*+,;=]))*)((:([0-9])*))?)((/(([A-Za-z0-9\-\._~]|(%[0-9A-Fa-f][0-9A-Fa-f])|[!$&amp;'()*+,;=]|:|@))*))*)|(/(((([A-Za-z0-9\-\._~]|(%[0-9A-Fa-f][0-9A-Fa-f])|[!$&amp;'()*+,;=]|:|@))+((/(([A-Za-z0-9\-\._~]|(%[0-9A-Fa-f][0-9A-Fa-f])|[!$&amp;'()*+,;=]|:|@))*))*))?)|((([A-Za-z0-9\-\._~]|(%[0-9A-Fa-f][0-9A-Fa-f])|[!$&amp;'()*+,;=]|:|@))+((/(([A-Za-z0-9\-\._~]|(%[0-9A-Fa-f][0-9A-Fa-f])|[!$&amp;'()*+,;=]|:|@))*))*)|)((\?((([A-Za-z0-9\-\._~]|(%[0-9A-Fa-f][0-9A-Fa-f])|[!$&amp;'()*+,;=]|:|@)|/|\?))*))?((#((([A-Za-z0-9\-\._~]|(%[0-9A-Fa-f][0-9A-Fa-f])|[!$&amp;'()*+,;=]|:|@)|/|\?))*))?)"/>

     *-->
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="absolute-URI-3986">
    <xs:annotation>
        <xs:documentation xmlns="http://www.w3.org/1999/xhtml">
	  <p>
            The <tt>absolute-URI-3986</tt> type checks the
            string against the regex grammar for absolute URIs
            in RFC 3986 Appendix A.
	  </p>
	  <p>The grammar is very like that for URI, but it does
	  not allow a fragment identifier.</p>
        </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:anyURI">
      <xs:pattern value="&absolute-URI;"/>	  
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="relative-reference-3986">
    <xs:annotation>
        <xs:documentation xmlns="http://www.w3.org/1999/xhtml">
	  <p>
            The <tt>relative-reference-3986</tt> type checks the
            string against the regex grammar for relative references
            in RFC 3986 Appendix A.
	  </p>
	  <p>The top-level rules in the grammar are:</p>
	  <pre>
	    relative-ref  = relative-part [ "?" query ] [ "#" fragment ]

	    relative-part = "//" authority path-abempty
                          / path-absolute
                          / path-noscheme
                          / path-empty
	  </pre>
        </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:anyURI">
      <xs:pattern value="&relative-ref;"/>
    </xs:restriction>
  </xs:simpleType>
  
  <xs:simpleType name="URI-reference-3986">
    <xs:annotation>
      <xs:documentation xmlns="http://www.w3.org/1999/xhtml">
        <p>
          The <tt>URI-reference-3986</tt> type checks the
          string against the regex grammar for URI references
          in RFC 3986 Appendix A.  This is the one most 
          users are likely to say they want when they are 
	  looking for a generic URI type and have thought about
	  it for a bit.  But it's not:  what they are most
	  likely to want in reality is the IRI-reference type
	  defined in the schema document for IRIs, in this
	  directory.
        </p>
        <p>The rule in the grammar is:</p>
        <pre>
          URI-reference = URI / relative-ref
        </pre>
        <p>Rather than write this as a single pattern,
        however, we will just take a union of the two
        types already defined.</p>
      </xs:documentation>  
    </xs:annotation>
    <xs:union memberTypes="lib:URI-3986 lib:relative-reference-3986"></xs:union>
  </xs:simpleType>


  <xs:annotation>
  <xs:documentation>

     <h3>To-do list</h3>
    
     <ul>
       <li>
	 <p>Make similar types for the earlier versions of the 
	 URI spec:  RFC 2396, 2732, 1808, 1738.  Use these to make
	 a union type for all forms of URI references (for example)
	 accepted by any RFC definition of URI or URL.</p>
       </li>
       <li>
	 <p>Make tighter patterns for at least some specific URI
	 schemes that have tighter grammars, as an illustration.  The
	 number of registered schemes is probably too high for it to
	 be feasible or reasonable to cover more than a few of them,
	 but there are certainly specific schemes it would be helpful
	 to be able to validate more tightly: for example, mailto,
	 doi, data, dict, dns, fax, file, imap, mid, news, nntp, pop,
	 pres, im, sms, tag, some forms of URN, z39.50, feed, git,
	 irc, jar, mvn, rsync, ssh, smb, svn.
	 </p>
       </li>
     </ul>
    
   </xs:documentation>
  </xs:annotation>

  <xs:annotation>
  <xs:documentation>

     <h3>Versioning policy for this document</h3>

     <p>$Id: TypeLibrary-URI-RFC3986.xsd,v 1.14 2011/05/03 01:51:32 cmsmcq Exp $</p>
    
     <p>
       In keeping with the XML Schema WG's standard versioning
       policy, this schema document will persist at
       http://www.w3.org/2011/04/TypeLibrary-URI-RFC3986.xsd.
     </p>
     <p>
       At the date of issue it can also be found at
       http://www.w3.org/2001/03/XMLSchema/URI-3986.xsd.  The schema
       document at that URI may however change in the future, in order
       to remain compatible with the latest version of XML Schema
       itself.  In other words, if the XML Schema namespace changes,
       the version of this document at
       http://www.w3.org/2001/03/XMLSchema/TypeLibrary-URI-3986.xsd
       will change accordingly; the version at
       http://www.w3.org/2011/04/TypeLibrary-URI-3986.xsd will not
       change.
     </p>
     <p>
       Previous dated (and unchanging) versions of this schema
       document include:
     </p>
     <ul>
       <li>[None]</li>
     </ul>
    
   </xs:documentation>
  </xs:annotation>
 
</xs:schema>