<?xml version="1.0" encoding="UTF-8"?>
<!-- $Date: 2001-06-01 16:45:37 +0530 (Fri, 01 Jun 2001) $ $Revision: 225913 $ -->
<!--[ NamedNodeMap object description ]-->
<interface name="NamedNodeMap" id="ID-1780488922">
  <descr><p>Objects implementing the <code>NamedNodeMap</code> interface are
      used to represent collections of nodes that can be accessed by name. Note
      that <code>NamedNodeMap</code> does not inherit from
      <code>NodeList</code>; <code>NamedNodeMaps</code> are not maintained in
      any particular order. Objects contained in an object implementing
      <code>NamedNodeMap</code> may also be accessed by an ordinal index, but
      this is simply to allow convenient enumeration of the contents of a
      <code>NamedNodeMap</code>, and does not imply that the DOM specifies an
      order to these Nodes. </p>
    <p><code>NamedNodeMap</code> objects in the DOM are <termref
        def="td-live">live</termref>.</p>
  </descr>
  <method name="getNamedItem" id="ID-1074577549">
    <descr><p>Retrieves a node specified by name.</p></descr>
    <parameters>
      <param name="name" type="DOMString" attr="in">
	<descr><p>The <code>nodeName</code> of a node to retrieve.</p></descr>
      </param>
    </parameters>
    <returns type="Node">
      <descr><p>A <code>Node</code> (of any type) with the specified
	  <code>nodeName</code>, or <code>null</code> if it does not
	  identify any node in this map.</p></descr>
    </returns>
    <raises>
      <!-- No exceptions -->
    </raises>
  </method>
  <method name="setNamedItem" id="ID-1025163788">
    <descr>
      <p>Adds a node using its <code>nodeName</code> attribute. If a node with
	that name is already present in this map, it is replaced by the new
	one.</p>
      <p>As the <code>nodeName</code> attribute is used to
	derive the name which the node must be stored under, multiple
	nodes of certain types (those that have a "special" string
	value) cannot be stored as the names would clash. This is seen
	as preferable to allowing nodes to be aliased.</p>
    </descr>
    <parameters>
      <param name="arg" type="Node" attr="in">
	<descr><p>A node to store in this map. The node will later be
	    accessible using the value of its <code>nodeName</code>
	    attribute.</p></descr>
      </param>
    </parameters>
    <returns type="Node">
      <descr><p>If the new <code>Node</code> replaces an existing node the
      replaced <code>Node</code> is returned, otherwise <code>null</code> is
      returned.</p></descr>
    </returns>
    <raises>
      <exception name="DOMException">
        <descr><p>WRONG_DOCUMENT_ERR: Raised if <code>arg</code> was created
	from a different document than the one that created this map.</p>
        <p>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.</p>
	<p>INUSE_ATTRIBUTE_ERR: Raised if <code>arg</code> is an
	<code>Attr</code> that is already an attribute of another
	<code>Element</code> object. The DOM user must explicitly clone
	<code>Attr</code> nodes to re-use them in other elements.</p></descr>
      </exception>
    </raises>
  </method>
  <method name="removeNamedItem" id="ID-D58B193">
    <descr><p>Removes a node specified by name. When this map contains the
        attributes attached to an element, if the removed attribute is
	known to have a default value, an attribute immediately appears
	containing the default value as well as the corresponding namespace
	URI, local name, and prefix when applicable.</p></descr>
    <parameters>
      <param name="name" type="DOMString" attr="in">
	<descr><p>The <code>nodeName</code> of the node to remove.</p>
        </descr>
      </param>
    </parameters>
    <returns type="Node">
       <descr><p>The node removed from this map if a node with such a name
	  exists.</p></descr>
    </returns>
    <raises>
      <exception name="DOMException">
        <descr><p>NOT_FOUND_ERR: Raised if there is no node named
	<code>name</code> in this map.</p>
        <p>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.</p>
	</descr>
      </exception>
    </raises>
  </method>
  <method name="item" id="ID-349467F9">
    <descr><p>Returns the <code>index</code>th item in the map.
	If <code>index</code> is greater than or equal to the number
	of nodes in this map, this returns <code>null</code>.</p>
    </descr> 
    <parameters>
      <param name="index" type="unsigned long" attr="in">
	<descr><p>Index into this map.</p></descr>
      </param>
    </parameters>
    <returns type="Node">
      <descr><p>The node at the <code>index</code>th position in the map, or
	  <code>null</code> if that is not a valid index.</p></descr>
    </returns>
    <raises>
      <!-- No exceptions -->
    </raises>
  </method>
  <attribute type="unsigned long" readonly = "yes" name="length"
    id="ID-6D0FB19E">
    <descr><p>The number of nodes in this map. The range of valid child node
	indices is <code>0</code> to <code>length-1</code>
	inclusive. </p></descr>
  </attribute>
  <method name="getNamedItemNS" id="ID-getNamedItemNS" since="DOM Level 2">
    <descr><p>Retrieves a node specified by local name and namespace
	URI. HTML-only DOM implementations do not need to implement this
	method.</p></descr>
    <parameters>
      <param name="namespaceURI" type="DOMString" attr="in">
	<descr><p>The <termref def='dt-namespaceURI'>namespace URI</termref> of
	    the node to retrieve.</p>
	</descr>
      </param>
      <param name="localName" type="DOMString" attr="in">
	<descr><p>The <termref def='dt-localname'>local name</termref> of the
	    node to retrieve.</p></descr>
      </param>
    </parameters>
    <returns type="Node">
      <descr><p>A <code>Node</code> (of any type) with the specified
	  local name and namespace URI, or <code>null</code> if they do not
	  identify any node in this map.</p></descr>
    </returns>
    <raises>
      <!-- No exceptions -->
    </raises>
  </method>
  <method name="setNamedItemNS" id="ID-setNamedItemNS" since="DOM Level 2">
    <descr>
      <p>Adds a node using its <code>namespaceURI</code> and
        <code>localName</code>. If a node with that namespace URI and that
	local name is already present in this map, it is replaced by the new
	one.</p>
      <p>HTML-only DOM implementations do not need to implement this
	method.</p>
    </descr>
    <parameters>
      <param name="arg" type="Node" attr="in">
	<descr><p>A node to store in this map. The node will later be
	    accessible using the value of its <code>namespaceURI</code> and
	    <code>localName</code> attributes.</p></descr>
      </param>
    </parameters>
    <returns type="Node">
      <descr><p>If the new <code>Node</code> replaces an existing node the
	  replaced <code>Node</code> is returned, otherwise <code>null</code>
	  is returned.</p></descr>
    </returns>
    <raises>
      <exception name="DOMException">
        <descr><p>WRONG_DOCUMENT_ERR: Raised if <code>arg</code> was created
	from a different document than the one that created this map.</p>
        <p>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.</p>
	<p>INUSE_ATTRIBUTE_ERR: Raised if <code>arg</code> is an
	<code>Attr</code> that is already an attribute of another
	<code>Element</code> object. The DOM user must explicitly clone
	<code>Attr</code> nodes to re-use them in other elements.</p></descr>
      </exception>
    </raises>
  </method>
  <method name="removeNamedItemNS" id="ID-removeNamedItemNS"
    since="DOM Level 2">
    <descr><p>Removes a node specified by local name and namespace URI. A
	removed attribute may be known to have a default value when this map
	contains the attributes attached to an element, as returned by the
	attributes attribute of the <code>Node</code> interface. If so, an
	attribute immediately appears containing the default value as well as
	the corresponding namespace URI, local name, and prefix when
	applicable.</p>
      <p>HTML-only DOM implementations do not need to implement this
	method.</p></descr>
    <parameters>
      <param name="namespaceURI" type="DOMString" attr="in">
	<descr><p>The <termref def='dt-namespaceURI'>namespace URI</termref> of
	    the node to remove.</p>
	</descr>
      </param>
      <param name="localName" type="DOMString" attr="in">
	<descr><p>The <termref def='dt-localname'>local name</termref> of the
	    node to remove.</p>
        </descr>
      </param>
    </parameters>
    <returns type="Node">
       <descr><p>The node removed from this map if a node with such a local
	  name and namespace URI exists.</p></descr>
    </returns>
    <raises>
      <exception name="DOMException">
        <descr><p>NOT_FOUND_ERR: Raised if there is no node with the specified
	    <code>namespaceURI</code> and <code>localName</code> in this
	    map.</p>
	  <p>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.</p>
	</descr>
      </exception>
    </raises>
  </method>
</interface>
      
